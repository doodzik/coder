// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: inteld/proto/inteld.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{0}
}

type Executable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash     string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Basename string `protobuf:"bytes,2,opt,name=basename,proto3" json:"basename,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Version is a per-tool extracted version string.
	// e.g. go1.26.4
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Executable) Reset() {
	*x = Executable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Executable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Executable) ProtoMessage() {}

func (x *Executable) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Executable.ProtoReflect.Descriptor instead.
func (*Executable) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{1}
}

func (x *Executable) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Executable) GetBasename() string {
	if x != nil {
		return x.Basename
	}
	return ""
}

func (x *Executable) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Executable) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Invocation is a message that represents a single invocation of an executable.
type Invocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executable       *Executable `protobuf:"bytes,1,opt,name=executable,proto3" json:"executable,omitempty"`
	Arguments        []string    `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	DurationMs       int64       `protobuf:"varint,3,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	ExitCode         int32       `protobuf:"varint,4,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	WorkingDirectory string      `protobuf:"bytes,5,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	GitRemoteUrl     string      `protobuf:"bytes,6,opt,name=git_remote_url,json=gitRemoteUrl,proto3" json:"git_remote_url,omitempty"`
}

func (x *Invocation) Reset() {
	*x = Invocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invocation) ProtoMessage() {}

func (x *Invocation) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invocation.ProtoReflect.Descriptor instead.
func (*Invocation) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{2}
}

func (x *Invocation) GetExecutable() *Executable {
	if x != nil {
		return x.Executable
	}
	return nil
}

func (x *Invocation) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Invocation) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Invocation) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *Invocation) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *Invocation) GetGitRemoteUrl() string {
	if x != nil {
		return x.GitRemoteUrl
	}
	return ""
}

type ReportPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executables []*Executable `protobuf:"bytes,1,rep,name=executables,proto3" json:"executables,omitempty"`
}

func (x *ReportPathRequest) Reset() {
	*x = ReportPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPathRequest) ProtoMessage() {}

func (x *ReportPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPathRequest.ProtoReflect.Descriptor instead.
func (*ReportPathRequest) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{3}
}

func (x *ReportPathRequest) GetExecutables() []*Executable {
	if x != nil {
		return x.Executables
	}
	return nil
}

type RecordInvocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invocations []*Invocation `protobuf:"bytes,1,rep,name=invocations,proto3" json:"invocations,omitempty"`
}

func (x *RecordInvocationRequest) Reset() {
	*x = RecordInvocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordInvocationRequest) ProtoMessage() {}

func (x *RecordInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordInvocationRequest.ProtoReflect.Descriptor instead.
func (*RecordInvocationRequest) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{4}
}

func (x *RecordInvocationRequest) GetInvocations() []*Invocation {
	if x != nil {
		return x.Invocations
	}
	return nil
}

type InstalledSoftware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DockerDesktop           bool `protobuf:"varint,1,opt,name=docker_desktop,json=dockerDesktop,proto3" json:"docker_desktop,omitempty"`
	DockerDesktopEnterprise bool `protobuf:"varint,2,opt,name=docker_desktop_enterprise,json=dockerDesktopEnterprise,proto3" json:"docker_desktop_enterprise,omitempty"`
	Vscode                  bool `protobuf:"varint,3,opt,name=vscode,proto3" json:"vscode,omitempty"`
	VscodeInsiders          bool `protobuf:"varint,4,opt,name=vscode_insiders,json=vscodeInsiders,proto3" json:"vscode_insiders,omitempty"`
	JetbrainsIntellij       bool `protobuf:"varint,5,opt,name=jetbrains_intellij,json=jetbrainsIntellij,proto3" json:"jetbrains_intellij,omitempty"`
	JetbrainsGateway        bool `protobuf:"varint,6,opt,name=jetbrains_gateway,json=jetbrainsGateway,proto3" json:"jetbrains_gateway,omitempty"`
}

func (x *InstalledSoftware) Reset() {
	*x = InstalledSoftware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstalledSoftware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstalledSoftware) ProtoMessage() {}

func (x *InstalledSoftware) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstalledSoftware.ProtoReflect.Descriptor instead.
func (*InstalledSoftware) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{5}
}

func (x *InstalledSoftware) GetDockerDesktop() bool {
	if x != nil {
		return x.DockerDesktop
	}
	return false
}

func (x *InstalledSoftware) GetDockerDesktopEnterprise() bool {
	if x != nil {
		return x.DockerDesktopEnterprise
	}
	return false
}

func (x *InstalledSoftware) GetVscode() bool {
	if x != nil {
		return x.Vscode
	}
	return false
}

func (x *InstalledSoftware) GetVscodeInsiders() bool {
	if x != nil {
		return x.VscodeInsiders
	}
	return false
}

func (x *InstalledSoftware) GetJetbrainsIntellij() bool {
	if x != nil {
		return x.JetbrainsIntellij
	}
	return false
}

func (x *InstalledSoftware) GetJetbrainsGateway() bool {
	if x != nil {
		return x.JetbrainsGateway
	}
	return false
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// GOOS
	OperatingSystem        string `protobuf:"bytes,2,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	OperatingSystemVersion string `protobuf:"bytes,3,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	CpuCores               uint32 `protobuf:"varint,4,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	MemoryTotal            uint64 `protobuf:"varint,5,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	// GOARCH
	Architecture      string             `protobuf:"bytes,6,opt,name=architecture,proto3" json:"architecture,omitempty"`
	GitConfigEmail    string             `protobuf:"bytes,7,opt,name=git_config_email,json=gitConfigEmail,proto3" json:"git_config_email,omitempty"`
	GitConfigName     string             `protobuf:"bytes,8,opt,name=git_config_name,json=gitConfigName,proto3" json:"git_config_name,omitempty"`
	InstalledSoftware *InstalledSoftware `protobuf:"bytes,9,opt,name=installed_software,json=installedSoftware,proto3" json:"installed_software,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegisterRequest) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *RegisterRequest) GetOperatingSystemVersion() string {
	if x != nil {
		return x.OperatingSystemVersion
	}
	return ""
}

func (x *RegisterRequest) GetCpuCores() uint32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *RegisterRequest) GetMemoryTotal() uint64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *RegisterRequest) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *RegisterRequest) GetGitConfigEmail() string {
	if x != nil {
		return x.GitConfigEmail
	}
	return ""
}

func (x *RegisterRequest) GetGitConfigName() string {
	if x != nil {
		return x.GitConfigName
	}
	return ""
}

func (x *RegisterRequest) GetInstalledSoftware() *InstalledSoftware {
	if x != nil {
		return x.InstalledSoftware
	}
	return nil
}

// SystemResponse is a message that the client streams to
// the daemon. It notifies of new tracking requests.
type SystemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*SystemResponse_TrackExecutables
	Message isSystemResponse_Message `protobuf_oneof:"message"`
}

func (x *SystemResponse) Reset() {
	*x = SystemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemResponse) ProtoMessage() {}

func (x *SystemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemResponse.ProtoReflect.Descriptor instead.
func (*SystemResponse) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{7}
}

func (m *SystemResponse) GetMessage() isSystemResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SystemResponse) GetTrackExecutables() *TrackExecutables {
	if x, ok := x.GetMessage().(*SystemResponse_TrackExecutables); ok {
		return x.TrackExecutables
	}
	return nil
}

type isSystemResponse_Message interface {
	isSystemResponse_Message()
}

type SystemResponse_TrackExecutables struct {
	TrackExecutables *TrackExecutables `protobuf:"bytes,1,opt,name=track_executables,json=trackExecutables,proto3,oneof"`
}

func (*SystemResponse_TrackExecutables) isSystemResponse_Message() {}

// TrackExecutables is a message that tells the daemon to track
// the executables with the given names.
type TrackExecutables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryName []string `protobuf:"bytes,1,rep,name=binary_name,json=binaryName,proto3" json:"binary_name,omitempty"`
}

func (x *TrackExecutables) Reset() {
	*x = TrackExecutables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackExecutables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackExecutables) ProtoMessage() {}

func (x *TrackExecutables) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackExecutables.ProtoReflect.Descriptor instead.
func (*TrackExecutables) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{8}
}

func (x *TrackExecutables) GetBinaryName() []string {
	if x != nil {
		return x.BinaryName
	}
	return nil
}

type ReportInvocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutablePath   string   `protobuf:"bytes,1,opt,name=executable_path,json=executablePath,proto3" json:"executable_path,omitempty"`
	Arguments        []string `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	DurationMs       int64    `protobuf:"varint,3,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	ExitCode         int32    `protobuf:"varint,4,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	WorkingDirectory string   `protobuf:"bytes,5,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
}

func (x *ReportInvocationRequest) Reset() {
	*x = ReportInvocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inteld_proto_inteld_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportInvocationRequest) ProtoMessage() {}

func (x *ReportInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inteld_proto_inteld_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportInvocationRequest.ProtoReflect.Descriptor instead.
func (*ReportInvocationRequest) Descriptor() ([]byte, []int) {
	return file_inteld_proto_inteld_proto_rawDescGZIP(), []int{9}
}

func (x *ReportInvocationRequest) GetExecutablePath() string {
	if x != nil {
		return x.ExecutablePath
	}
	return ""
}

func (x *ReportInvocationRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ReportInvocationRequest) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ReportInvocationRequest) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ReportInvocationRequest) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

var File_inteld_proto_inteld_proto protoreflect.FileDescriptor

var file_inteld_proto_inteld_proto_rawDesc = []byte{
	0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6a, 0x0a, 0x0a,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x64, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x11, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x76, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x76, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x6a, 0x65, 0x74, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x6a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6a, 0x65,
	0x74, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x6a, 0x12,
	0x2b, 0x0a, 0x11, 0x6a, 0x65, 0x74, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6a, 0x65, 0x74, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x92, 0x03, 0x0a,
	0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x22, 0x64, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x32, 0xc8, 0x01, 0x0a, 0x0b, 0x49,
	0x6e, 0x74, 0x65, 0x6c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x51, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x64, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inteld_proto_inteld_proto_rawDescOnce sync.Once
	file_inteld_proto_inteld_proto_rawDescData = file_inteld_proto_inteld_proto_rawDesc
)

func file_inteld_proto_inteld_proto_rawDescGZIP() []byte {
	file_inteld_proto_inteld_proto_rawDescOnce.Do(func() {
		file_inteld_proto_inteld_proto_rawDescData = protoimpl.X.CompressGZIP(file_inteld_proto_inteld_proto_rawDescData)
	})
	return file_inteld_proto_inteld_proto_rawDescData
}

var file_inteld_proto_inteld_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_inteld_proto_inteld_proto_goTypes = []interface{}{
	(*Empty)(nil),                   // 0: inteld.Empty
	(*Executable)(nil),              // 1: inteld.Executable
	(*Invocation)(nil),              // 2: inteld.Invocation
	(*ReportPathRequest)(nil),       // 3: inteld.ReportPathRequest
	(*RecordInvocationRequest)(nil), // 4: inteld.RecordInvocationRequest
	(*InstalledSoftware)(nil),       // 5: inteld.InstalledSoftware
	(*RegisterRequest)(nil),         // 6: inteld.RegisterRequest
	(*SystemResponse)(nil),          // 7: inteld.SystemResponse
	(*TrackExecutables)(nil),        // 8: inteld.TrackExecutables
	(*ReportInvocationRequest)(nil), // 9: inteld.ReportInvocationRequest
}
var file_inteld_proto_inteld_proto_depIdxs = []int32{
	1, // 0: inteld.Invocation.executable:type_name -> inteld.Executable
	1, // 1: inteld.ReportPathRequest.executables:type_name -> inteld.Executable
	2, // 2: inteld.RecordInvocationRequest.invocations:type_name -> inteld.Invocation
	5, // 3: inteld.RegisterRequest.installed_software:type_name -> inteld.InstalledSoftware
	8, // 4: inteld.SystemResponse.track_executables:type_name -> inteld.TrackExecutables
	6, // 5: inteld.IntelDaemon.Register:input_type -> inteld.RegisterRequest
	4, // 6: inteld.IntelDaemon.RecordInvocation:input_type -> inteld.RecordInvocationRequest
	3, // 7: inteld.IntelDaemon.ReportPath:input_type -> inteld.ReportPathRequest
	9, // 8: inteld.IntelClient.ReportInvocation:input_type -> inteld.ReportInvocationRequest
	7, // 9: inteld.IntelDaemon.Register:output_type -> inteld.SystemResponse
	0, // 10: inteld.IntelDaemon.RecordInvocation:output_type -> inteld.Empty
	0, // 11: inteld.IntelDaemon.ReportPath:output_type -> inteld.Empty
	0, // 12: inteld.IntelClient.ReportInvocation:output_type -> inteld.Empty
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_inteld_proto_inteld_proto_init() }
func file_inteld_proto_inteld_proto_init() {
	if File_inteld_proto_inteld_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inteld_proto_inteld_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Executable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordInvocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstalledSoftware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackExecutables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inteld_proto_inteld_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportInvocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_inteld_proto_inteld_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SystemResponse_TrackExecutables)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inteld_proto_inteld_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_inteld_proto_inteld_proto_goTypes,
		DependencyIndexes: file_inteld_proto_inteld_proto_depIdxs,
		MessageInfos:      file_inteld_proto_inteld_proto_msgTypes,
	}.Build()
	File_inteld_proto_inteld_proto = out.File
	file_inteld_proto_inteld_proto_rawDesc = nil
	file_inteld_proto_inteld_proto_goTypes = nil
	file_inteld_proto_inteld_proto_depIdxs = nil
}
